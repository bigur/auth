'''Роль пользователя предназначена для определения прав доступа.
Роль содержит список строк с правами, которыми будет обладать
пользователь с соответствующей ролью. При этом у пользователя
может быть несколько ролей.

Для снижения нагрузки на базу данных при запросах используется специальный
алгоритм определения ролей пользователя на основе битов.

Когда пользователь проходит аутентификацию, система выдаёт ему JWT-токен,
в котором указывается специальное число - ``mask``. Это число является суммой
чисел из свойства :attr:`Role.bit` объекта класса
:class:`Role`.

Число :attr:`Role.bit` прописано в каждой роли и является
степенью двойки, определяя какой бит является признаком наличия данной роли.
Это значение должно быть уникально для каждой роли.

Когда происходит авторизация, сервер берёт число ``mask`` из JWT-токена,
передаваемого пользователем, с помощью логического оператора AND
сравнивает с числом :attr:`Role.bit` для каждой роли.
Если в ``mask`` бит установлен, значит пользователь обладает данной ролью.

Далее сервер строит список прав пользователя на основании полученных ролей.
Соответствие ролей и прав доступа заранее кешировано. Таким образом система
определяет наличие прав пользователя, не делая запрос к базе данных.

Пример. Пусть в системе есть три роли:

  * Директор, с битом ``0b001`` (число 1)
  * Бухгалтер, с битом ``0b010`` (число 2)
  * Менеджер, с битом ``0b100`` (число 4)

Пользователь делает запрос с серверу, и в JWT-токене прописана ``mask``
со значением ``3``. Сервер проверяет роли следующим образом::

  roles = []
  for role in (director_role, accounting_role, manager_role):
      if token.mask & role != 0:
          roles.append(role)

В результате ``roles`` будет содержать список из ролей директора и
бухгалтера.'''

__author__ = 'Gennady Kovalev <gik@bigur.ru>'
__copyright__ = '(c) 2016-2018 Business group for development management'
__licence__ = 'For license information see LICENSE'

from bigur.store import Stored


class Role(Stored):
    '''Класс роли пользователя.'''

    __metadata__ = {
        'collection': 'roles',
    }

    def __init__(self, bit, code, title, permissions=None):
        ''':param int bit: бит, отвечающий за определение наличия роли у
            пользователя, должен быть степенью двойки
        :param str code: код роли, строка для поиска в БД
        :param str title: название роли
        :param list persmission: список строк, определяющих права
            пользователя'''

        #: Число с установленным битом для определения наличия данной
        #: роли у пользователя.
        self.bit = bit

        #: Строковой код роли.
        self.code = code

        #: Название роли.
        self.title = title

        #: Список (:class:`list`) строк прав, доступных пользователям данной
        #: роли.
        self.permissions = permissions

        super().__init__()
