'''Сервер предоставляет возможность обслуживать организации с различными
сферами деятельности, с различными организационными структурами, процессами
и своими укладами. При этом организации можно объединить в группы по принципу
схожести типовых задач, по похожим продуктам, процессам и так далее.

Конфигурация - это как типовое решение определённых задач. Например,
управление небольшой торговой компанией, управление садоводческим
товариществом, решение для стратегического планирования.

Конфигурация нужна для того, чтобы объединить различные элементы в группы
и выводить пользователю, например, список ролей только относящийся к его сфере
деятельности.'''

__author__ = 'Gennady Kovalev <gik@bigur.ru>'
__copyright__ = '(c) 2016-2018 Business group for development management'
__licence__ = 'For license information see LICENSE'

from bigur.store import Stored


class Configuration(Stored):
    '''Класс, описывающий типовую конфигурацию. Конфигурация содержит
    сущности, которые она поддерживает. Например, список ролей, список
    тарифных планов и т.д.'''

    __metadata__ = {
        'collection': 'configurations',
    }

    def __init__(self, code, title, roles, owner_roles=None):
        '''
        :param str code: текстовый код конфигурации, необходим
            для поиска нужной конфигурации в БД в процессе написания кода
        :param str title: наименование конфигурации
        :param list roles: список ид ролей, которые доступны в конфигурации
        :param list owner_roles: список ид ролей, которые будут назначены
            пользователю, создающему новую организацию.'''
        #: Текстовый код конфигурации.
        self.code = code

        #: Наименование конфигурации.
        self.title = title

        #: Список ИД ролей, которые поддерживаются конфигурацией.
        self.roles = roles

        #: Роли, которые назначаются пользователю, создающему
        #: :class:`~bigur.auth.namespace.Namespace` с данной конфигурацией.
        #: Это :class:`list` ИД ролей.
        self.owner_roles = owner_roles
        super().__init__()
