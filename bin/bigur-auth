#!/usr/bin/env python3

from argparse import SUPPRESS
from asyncio import get_event_loop
from logging import getLogger, StreamHandler, DEBUG, INFO, WARNING, ERROR

from aiohttp.web import Application, run_app, view
from aiohttp_jinja2 import setup as jinja_setup
from jinja2 import FileSystemLoader
from bigur.store import Migrator, db
from bigur.utils import argparser, config
from bigur.utils.logger import BigurFormatter

from bigur.auth import migration
from bigur.auth.handlers import OwnerPasswordHandler, RootHandler, LoginFormHandler
from bigur.auth.oidc_validator import OIDCValidator
from bigur.auth.server import Server
from bigur.auth.version import __version__


# Обрабатываем командную строку
argparser.add_argument('-h', '--help', action='help',
                       default=SUPPRESS,
                       help='вывод подсказки об использовании программы')

argparser.add_argument('-c', '--config', dest='config', metavar='FILE',
                       default='/etc/bigur/auth.conf',
                       help='путь к файлу конфигураци')


# Настраиваем логгер
logger = getLogger('bigur.auth')

handler = StreamHandler()

frmt = config.get('general', 'log_format', fallback='stdout').lower()
if frmt == 'journal':
    handler.setFormatter(BigurFormatter(fmt='{message}', namelen=40))
else:
    handler.setFormatter(BigurFormatter(
        fmt='{color} [{levelname:1.1} {name}:{lineno:d}]{end_color} {message}',
        namelen=40
    ))

verbosity = config.get('general', 'log_verbosity', fallback='debug').lower()
if verbosity == 'error':
    getLogger().setLevel(ERROR)
    logger.setLevel(ERROR)
elif verbosity == 'warning':
    getLogger().setLevel(WARNING)
    logger.setLevel(WARNING)
elif verbosity == 'info':
    getLogger().setLevel(INFO)
    logger.setLevel(INFO)
else:
    getLogger().setLevel(DEBUG)
    getLogger('asyncio').setLevel(INFO)
    logger.setLevel(DEBUG)

getLogger().addHandler(handler)


# Запускаем миграцию
loop = get_event_loop()
loop.run_until_complete(Migrator('auth', __version__).on_next(db))


# Устанавливаем веб-сервер
app = Application()


# Создаём сервер аутентификации
validator = OIDCValidator()
app['server'] = Server(validator)


# Добавляем маршруты
app.add_routes([
    view('/', RootHandler),
    view('/sign-in', LoginFormHandler),
    view('/token', OwnerPasswordHandler),
])


# Инициализируем движок шаблонов
templates = config.get('auth', 'templates',
                       fallback='/usr/share/bigur/auth/templates')
jinja_setup(app, loader=FileSystemLoader(templates))


# Запускаем веб-сервер
bind_host = config.get('api', 'http_bind_host', fallback='localhost')
try:
    bind_port = config.getint('api', 'http_bind_port', fallback=8889)
except ValueError:
    bind_port = 8889

logger.info('Сервер авторизации запущен на %s:%s', bind_host, bind_port)
run_app(app, host=bind_host, port=bind_port, print=lambda x: None)
