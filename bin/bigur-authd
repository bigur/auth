#!/usr/bin/env python3

from asyncio import get_event_loop
from argparse import ArgumentParser
from logging import getLogger
from logging.config import dictConfig
from os import urandom
from os.path import basename
from sys import argv
from warnings import warn

from aiohttp.web import Application, run_app
from aiohttp_cors import CorsViewMixin, setup as setup_cors
from aiohttp_jinja2 import setup as jinja_setup
from jinja2 import FileSystemLoader
from rx.scheduler.eventloop import AsyncIOScheduler

from bigur.auth.config import config
from bigur.auth.middlewares import session
from bigur.auth.store import store
from bigur.auth.utils import import_class

# Setup command line args
argparser = ArgumentParser()

argparser.add_argument(
    '-c',
    '--config',
    dest='config',
    metavar='FILE',
    default='/etc/bigur/auth.yaml',
    help='config file path')

args = argparser.parse_args()

# Create web server
app = Application(middlewares=[session])

# Load configuration
config.import_config(args.config)

# Init logger
dictConfig(config.get('logging'))
logger = getLogger(basename(argv[0]))

# Setup CORS
cors = setup_cors(app)

# Setup routing
for endpoint in config.get('http_server.endpoints').values():
    view = import_class(endpoint['handler'])
    route = app.router.add_route('*', endpoint['path'], view)
    if issubclass(view, CorsViewMixin):
        cors.add(route)

endpoint = config.get('http_server.static')
app.router.add_static(endpoint['prefix'], endpoint['path'])

# Initialize template engine
templates = config.get('http_server.templates')
jinja_setup(app, loader=FileSystemLoader(templates))

# Load/generate cookie crypt key
key_file = config.get('authn.cookie.key_file')

try:
    with open(key_file, 'rb') as fh_cookie_read:
        key: bytes = fh_cookie_read.read()

except OSError as e:
    logger.warning('Error while read cookie key: %s', e)
    key = urandom(32)
    if config.get('authn.cookie.write_key'):
        logger.warning('Writing new cookie key to file: %s', key_file)
        try:
            with open(key_file, 'wb') as fh_cookie_write:
                fh_cookie_write.write(key)
        except OSError as e:
            logger.error('Error while save cookie key file: %s', e)

app['cookie_key'] = key

# Initialize store
store_class = import_class(config.get('store.class'))
store_config = config.get('store.config', {})
store.set_store(store_class(**store_config))


class WarnWrapper:

    def __getattr__(self, name):
        warn(
            'Use of app[\'store\'] is depricated',
            DeprecationWarning,
            stacklevel=2)
        return getattr(store, name)

    def __setattr__(self, name, value):
        warn(
            'Use of app[\'store\'] is depricated',
            DeprecationWarning,
            stacklevel=2)
        return setattr(store, name, value)


app['store'] = WarnWrapper()

# Create rx scheduler
app['scheduler'] = AsyncIOScheduler(get_event_loop())

# Start web-server
host = config.get('http_server.bind.host')
port = config.get('http_server.bind.port')

logger.info('Bigur OpenID connect / OAuth2 server started at %s:%s', host, port)
run_app(app, host=host, port=port, print=lambda x: None)
