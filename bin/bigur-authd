#!/usr/bin/env python3

from asyncio import get_event_loop
from argparse import ArgumentParser
from logging import getLogger
from logging.config import dictConfig
from os import urandom
from os.path import basename
from sys import argv

from aiohttp.web import Application, run_app
from aiohttp_cors import CorsViewMixin, setup as setup_cors
from aiohttp_jinja2 import setup as jinja_setup
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from jinja2 import FileSystemLoader
from rx.scheduler.eventloop import AsyncIOScheduler

from bigur.auth.config import config
from bigur.auth.middlewares import session
from bigur.auth.utils import import_class

# Setup command line args
argparser = ArgumentParser()

argparser.add_argument(
    '-c',
    '--config',
    dest='config',
    metavar='FILE',
    default='/etc/bigur/auth.yaml',
    help='config file path')

args = argparser.parse_args()

# Create web server
app = Application(middlewares=[session])

# Load configuration
config.import_config(args.config)

# Init logger
dictConfig(config.get('logging'))
logger = getLogger(basename(argv[0]))

# Setup CORS
cors = setup_cors(app)

# Setup routing
for endpoint in config.get('http_server.endpoints').values():
    view = import_class(endpoint['handler'])
    route = app.router.add_route('*', endpoint['path'], view)
    if issubclass(view, CorsViewMixin):
        cors.add(route)

endpoint = config.get('http_server.static')
app.router.add_static(endpoint['prefix'], endpoint['path'])

# Initialize template engine
templates = config.get('http_server.templates')
jinja_setup(app, loader=FileSystemLoader(templates))

# Load/generate cookie crypt key
key_file = config.get('authn.cookie.key_file')

try:
    with open(key_file, 'rb') as fh_cookie_read:
        key: bytes = fh_cookie_read.read()

except OSError as e:
    logger.warning('Error while read cookie key: %s', e)
    key = urandom(32)
    if config.get('authn.cookie.write_key'):
        logger.warning('Writing new cookie key to file: %s', key_file)
        try:
            with open(key_file, 'wb') as fh_cookie_write:
                fh_cookie_write.write(key)
        except OSError as e:
            logger.error('Error while save cookie key file: %s', e)

app['cookie_key'] = key

# Load/generate RSA key for JWT
backend = default_backend()
app['jwt_keys'] = []
filenames = config.get('oauth2.jwt_keys', [])
for jwt_key_file in filenames:
    try:
        with open(jwt_key_file, 'rb') as fh_jwt_read:
            app['jwt_keys'].append(
                serialization.load_pem_private_key(
                    fh_jwt_read.read(), password=None, backend=backend))
    except OSError as exc:
        logger.error('Error while load jwt key file: %s', exc)

if not app['jwt_keys']:
    logger.warning('No jwt keys, generate new one...')
    index = 0
    while not index or index < len(filenames):
        app['jwt_keys'].append(
            rsa.generate_private_key(
                public_exponent=65537, key_size=2048, backend=backend))
        if index < len(filenames):
            try:
                with open(filenames[index], 'w') as fh_jwt_write:
                    pem = app['jwt_keys'][-1].private_bytes(
                        encoding=serialization.Encoding.PEM,
                        format=serialization.PrivateFormat.TraditionalOpenSSL,
                        encryption_algorithm=serialization.NoEncryption())
                    fh_jwt_write.write(pem.decode('utf-8'))
            except OSError as e:
                logger.error('Error while save generated key: %s', e)
        index += 1

# Initialize store
store_class = import_class(config.get('store.class'))
store_config = config.get('store.config', {})
app['store'] = store_class(**store_config)

# Create rx scheduler
app['scheduler'] = AsyncIOScheduler(get_event_loop())

# Start web-server
host = config.get('http_server.bind.host')
port = config.get('http_server.bind.port')

logger.info('Bigur OpenID connect / OAuth2 server started at %s:%s', host, port)
run_app(app, host=host, port=port, print=lambda x: None)
